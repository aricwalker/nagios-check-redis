#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'redis'

options = { :conn => { :host => "localhost", :port => 6379, :password => nil, :timeout => 5 }, 
            :nagios => {}
          }

OptionParser.new do |opt|
  opt.banner = "Usage: #{$0} command <options>"

  opt.separator ""
  opt.separator "Nagios options:"

  opt.on("-w", "--warn WARN", Integer, "Nagios warning level") { |warn| options[:nagios][:warn] = warn }
  opt.on("-c", "--crit CRIT", Integer, "Nagios critical level") { |crit| options[:nagios][:crit] = crit }
  opt.on("-e", "--expc WARN", Integer, "Nagios warning level") { |expc| options[:nagios][:expected_clients] = expc }

  opt.separator ""
  opt.separator "Connection options:"

  opt.on('-H', '--host [HOSTNAME]', 'Hostname (Default: "localhost")') { |o| options[:conn][:host] = o if o }
  opt.on('-p', '--port [PORT]', 'Port (Default: "6379")') { |o| options[:conn][:port] = o if o }
  opt.on('-P', '--password [PASSWORD]', 'Password (Default: blank)') { |o| options[:conn][:password] = o if o }
  opt.on('-t', '--timeout [TIMEOUT]', Integer, 'Timeout in seconds (Default: 5)') { |o| options[:conn][:timeout] = o if o }

  opt.on_tail("-h", "--help", "Show this message") do
    puts opt
    exit 0
  end
end.parse!

command = ARGV[0]

class CheckRedis

  def initialize(opts, cmd)
    @redis = Redis.new(opts[:conn])
    @stats = @redis.info

    if @stats[cmd]
      send(cmd.to_sym, opts[:nagios])      
    else
      puts "UNKNOWN: No such key - #{cmd}"
      exit 3
    end
    
    rescue Errno::ECONNREFUSED => e
      puts e.message
      exit 2
    rescue Errno::ENETUNREACH => e
      puts e.message
      exit 2
    rescue Errno::EHOSTUNREACH => e
      puts e.message
      exit 2
    rescue Errno::EACCES => e
      puts e.message
      exit 2
  end

  private

  def process_id(options)
    puts "OK: process_id is #{@stats['process_id']}"
    exit 0
  end

  def connected_clients(options)
    value = @stats['connected_clients'].to_i
    puts "OK: connected_clients is #{@stats['connected_clients']}"
    exit 0
  end

  def used_memory_peak(options)
    value = @stats['used_memory_peak'].to_i
    if value >= options[:warn]
      puts "WARN: used_memory_peak exceeds warning level of #{options[:warn]} : #{value} | used_memory_peak=#{value} (#{@stats['used_memory_human']}) ;#{options[:warn]};#{options[:crit]};;"
      exit 1
    else
      puts "OK: used_memory_peak is ok | used_memory=#{value}  (#{@stats['used_memory_human']}) ;#{options[:warn]};#{options[:crit]};;"
      exit 0
    end 
    # TODO: redis.info has some human_values
  end

  def used_memory(options)
    value = @stats['used_memory'].to_i
    if value >= options[:crit]
      puts "CRIT: used_memory exceeds critical level of #{options[:crit]} : #{value} | used_memory=#{value} (#{@stats['used_memory_human']}) ;#{options[:warn]};#{options[:crit]};;"
      exit 2
    elsif value >= options[:warn]
      puts "WARN: used_memory exceeds warning level of #{options[:warn]} : #{value} | used_memory=#{value} (#{@stats['used_memory_human']}) ;#{options[:warn]};#{options[:crit]};;"
      exit 1
    else
      puts "OK: used_memory is ok | used_memory=#{value}  (#{@stats['used_memory_human']}) ;#{options[:warn]};#{options[:crit]};;"
      exit 0
    end 
    # TODO: redis.info has some human_values
  end

end

CheckRedis.new(options, command)